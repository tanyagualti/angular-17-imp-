subject ka use data communication k liye hota hai from one copmponent to to other component'
but sochne wali bat yeh hai ki data communiucation m @output and @input ka bhi use hota hai toh subject ki jrurt kyu pdhi
but inka use sirf tb hota hai jb component me child aur parent ka relation ho tb output input ka use krskte hai
otherwise hum subject ka use krnge


now we have to discuss about subject?
subject ek special type ka observable hai
but why?

subject same time pr observable bhi hai aur observer bhi hai  (subject s hum data subscribe bhi kr skte hai aur subscribe me hum data init bhi kr skte hai next bhi kr skte hai)

observable(pipe,subscribe)
observer(next,error,complete)

subject bhi ek event emitor ki trh kam krta hai but iska kam event emittor ki trh limited nhi hai subbject me hum data init ki jgh next use krte hai
but kam whi hai ek component s dusre component me data bhje yaa service k pass bhi data bhj skte hai

export class SubjectService{
exclusive=new Subject<boolean>;
}

Purpose: SubjectService provides a Subject named exclusive that other components can use to send and receive boolean values.
Subject: This is an RxJS class that acts as both an Observable and an Observer. It allows components to push values (next()) and subscribe to receive values.

data receive krne k litye hum subscribe and next method dono use kr skte hai


header.component.ts

exclusive:boolean=false;
  constructor(private sub:SubjectService){
    this.sub.exclusive.subscribe(result=>{
      this.exclusive = result;
    })
  }

Purpose: HeaderComponent subscribes to the exclusive Subject from the SubjectService to react to changes and update its exclusive property accordingly.
Subscription: The component subscribes to the exclusive subject and updates the exclusive property based on the received value.
header component subject service s subscribe hai ab jo bhi value aygi service k pass aa jaygi aur service us cvalue koi kisi aur component ko tranfer kr skti hai



 Acts as the intermediary or mediator that holds the Subject instance. It doesn't directly transfer data from one component to another but provides a shared Subject that can be used by multiple components to emit and listen to data.

directly component to component data transfer nhi hota ek shared subject bnana pdhta hai bech me jo data share krwata hai ab suibject service subject component s data leke header component tk phuchaygi aur header component apna exclusive heading pr apply kregi


Data Flow Breakdown
From SubjectComponent to SubjectService:

SubjectComponent calls this.ser.exclusive.next(true) when it is initialized.
Later, SubjectComponent calls this.ser.exclusive.next(false) when it is destroyed.
This means SubjectComponent pushes values (true or false) to the Subject in the SubjectService.

From SubjectService to HeaderComponent:

HeaderComponent subscribes to this.sub.exclusive (which is the Subject in SubjectService).
Whenever the Subject emits a new value (either true or false), HeaderComponent receives this value through its subscription and updates its own exclusive property.

hum data send krte hue next() method isliye use krte hai li uski value jitne bhi component subsribe kr rhe hai sbke pass phuch jaye3

In SubjectComponent, the sendValue() method is called with true or false. This method internally calls this.exclusive.next(value), which pushes the value to all subscribers.
